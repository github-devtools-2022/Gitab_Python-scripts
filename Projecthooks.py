import csv
import requests

# Variable of Token
TOKEN = "glpat-nJX9i3StVsZY7nFnX5sg"

# CSV file path
CSV_FILE = "Viri-projecthooks.csv"

# Write headers to the CSV file
with open(CSV_FILE, 'w', newline='', encoding='utf-8') as csvfile:
    csv_writer = csv.writer(csvfile)
    csv_writer.writerow(["project_id", "path", "path_with_namespace", "web_url", "last_activity_at", 
                         "namespace_kind", "namespace_full_path", "archived", "visibility", 
                         "hook_id", "hook_url", "push_events", "push_events_branch_filter",
                         "issues_events", "confidential_issues_events", "merge_requests_events",
                         "tag_push_events", "note_events", "confidential_note_events", "job_events",
                         "pipeline_events", "wiki_page_events", "deployment_events", "releases_events",
                         "enable_ssl_verification", "repository_update_events", "alert_status",
                         "disabled_until", "url_variables", "created_at"])

    # Declare the project ids in an array
    project_ids = [ 1592,1591,1590,1589,1587,1586,1585,1584,1583,1582,1581,1580,1579,1578,1576,1575,1574,1573,1572,1571,1570,1568,1567,1566,1565,1564,1563,1562,1561,1560,1559,1558,1557,1556,1555,1554,1553,1552,1551,1550,1549,1548,1547,1546,1545,1543,1542,1541,1540,1539,1538,1537,1536,1535,1534,1533,1532,1531,1530,1529,1528,1527,1526,1525,1524,1523,1522,1521,1520,1519,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1499,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1478,1476,1475,1473,1472,1471,1470,1469,1467,1466,1465,1464,1460,1459,1458,1457,1456,1455,1454,1453,1452,1451,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1432,1431,1430,1429,1428,1427,1426,1425,1424,1423,1422,1420,1419,1418,1417,1416,1415,1413,1412,1411,1410,1409,1407,1406,1405,1404,1403,1402,1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1383,1382,1378,1377,1376,1375,1374,1373,1372,1371,1370,1368,1367,1366,1365,1364,1363,1362,1361,1360,1359,1358,1357,1356,1355,1354,1352,1351,1350,1349,1348,1347,1346,1345,1342,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1328,1327,1325,1324,1323,1322,1321,1319,1318,1317,1316,1315,1314,1313,1312,1310,1309,1307,1306,1305,1304,1303,1302,1301,1300,1298,1297,1296,1295,1294,1293,1291,1289,1288,1287,1286,1285,1284,1283,1280,1279,1278,1277,1276,1275,1274,1273,1271,1270,1269,1268,1267,1266,1265,1264,1263,1262,1261,1259,1255,1254,1253,1252,1251,1250,1249,1248,1247,1244,1242,1241,1240,1239,1238,1237,1235,1234,1233,1232,1231,1230,1228,1227,1226,1225,1223,1222,1221,1220,1219,1218,1216,1215,1213,1212,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196,1195,1193,1192,1190,1189,1187,1186,1185,1184,1183,1182,1181,1179,1177,1175,1174,1173,1170,1169,1168,1164,1163,1161,1159,1158,1157,1156,1155,1154,1152,1151,1149,1148,1147,1146,1145,1144,1142,1139,1137,1136,1135,1134,1133,1132,1131,1130,1128,1126,1124,1123,1122,1121,1120,1118,1116,1115,1113,1112,1111,1110,1109,1103,1102,1101,1100,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1082,1081,1080,1079,1078,1077,1076,1074,1073,1072,1071,1070,1069,1067,1066,1065,1062,1061,1059,1053,1052,1051,1050,1049,1048,1047,1045,1044,1043,1042,1041,1040,1039,1038,1037,1034,1033,1032,1030,1029,1028,1027,1026,1025,1024,1023,1022,1020,1019,1017,1016,1015,1014,1013,1012,1011,1010,1008,1006,1005,1004,1003,998,997,994,993,992,991,990,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,809,808,807,806,803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,770,769,768,767,766,765,759,758,757,756,755,754,753,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,721,720,719,718,716,715,714,713,712,709,708,707,706,705,704,703,700,699,698,697,696,693,692,690,689,688,687,685,684,683,682,681,680,678,677,676,675,674,673,672,671,670,669,668,665,664,663,662,661,660,659,658,657,656,641,640,639,638,636,634,632,631,630,629,627,626,625,624,622,621,620,619,618,617,615,613,612,610,609,608,607,606,605,604,601,600,599,598,597,596,594,593,591,590,589,588,587,586,585,584,582,581,580,579,578,577,576,575,574,573,572,571,570,568,567,566,565,564,563,562,560,559,558,557,556,555,554,553,552,550,549,547,545,544,543,542,541,540,539,538,537,535,534,533,532,531,530,528,517,516,514,510,507,506,505,504,500,499,498,497,496,495,494,493,492,491,489,488,487,486,485,484,482,481,480,479,478,477,475,474,470,468,467,466,465,464,463,462,461,460,459,458,456,455,454,453,452,451,450,449,448,447,445,444,443,440,439,438,435,434,433,426,425,424,423,422,421,420,419,418,416,415,413,412,411,410,409,408,407,404,401,398,396,395,394,392,391,390,389,388,387,385,384,383,382,381,380,379,378,377,375,374,373,371,370,368,366,365,364,363,362,361,359,357,354,353,350,349,347,346,344,343,342,340,339,336,335,334,333,332,331,330,329,327,326,325,322,321,319,318,316,315,314,313,312,310,309,307,304,303,301,298,297,296,294,292,291,290,288,287,286,285,284,281,280,279,277,275,271,270,269,268,265,264,263,262,260,258,257,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,219,218,216,215,213,212,211,210,209,208,206,200,199,196,194,193,192,191,189,188,187,186,185,184,179,178,177,176,175,174,172,171,170,169,168,167,165,163,161,160,158,157,155,154,153,152,150,148,145,142,141,140,139,138,137,136,135,133,130,129,128,127,123,122,120,119,118,115,114,113,109,108,105,104,103,100,94,93,92,90,89,88,86,85,84,82,81,80,79,78,77,76,75,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,54,53,52,51,50,49,48,47,46,45,44,42,41,39,38,37,36,35,32,30,29,28,27,26,25,24,23,22,21,20,19,17,14,13,12,11,10,9,8,7,5,4,3,1  ]  # Add your project ids here

    # Loop through the project ids
    for project_id in project_ids:
        # Run the first API call
        response_project = requests.get(f"https://git.viriciti.com/api/v4/projects/{project_id}?statistics=true",
                                        headers={"PRIVATE-TOKEN": TOKEN})

        # Check if the request was successful
        if response_project.status_code == 200:
            project_info = response_project.json()

            # Check if 'namespace' key exists
            if "namespace" in project_info:
                namespace_kind = project_info["namespace"]["kind"]
                namespace_full_path = project_info["namespace"]["full_path"]
            else:
                namespace_kind = ""
                namespace_full_path = ""

            # Run the second API call
            response_hooks = requests.get(f"https://git.viriciti.com/api/v4/projects/{project_id}/hooks",
                                          headers={"PRIVATE-TOKEN": TOKEN})

            hook_data = response_hooks.json()

            # Write data to the CSV file
            for hook in hook_data:
                csv_writer.writerow([
                    project_info["id"], project_info["path"], project_info["path_with_namespace"],
                    project_info["web_url"], project_info["last_activity_at"],
                    namespace_kind, namespace_full_path,
                    project_info["archived"], project_info["visibility"],
                    hook["id"], hook["url"], hook.get("push_events", ""),
                    hook.get("push_events_branch_filter", ""), hook.get("issues_events", ""),
                    hook.get("confidential_issues_events", ""), hook.get("merge_requests_events", ""),
                    hook.get("tag_push_events", ""), hook.get("note_events", ""),
                    hook.get("confidential_note_events", ""), hook.get("job_events", ""),
                    hook.get("pipeline_events", ""), hook.get("wiki_page_events", ""),
                    hook.get("deployment_events", ""), hook.get("releases_events", ""),
                    hook.get("enable_ssl_verification", ""), hook.get("repository_update_events", ""),
                    hook.get("alert_status", ""), hook.get("disabled_until", ""),
                    hook.get("url_variables", ""), hook.get("created_at", "")
                ])
        else:
            print(f"Error in the API call of id {project_id}")
